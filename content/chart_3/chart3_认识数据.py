# -*- coding:utf-8 -*-
# @Time : 2022/7/29 5:29 下午
# @Author : Bin Bin Xue
# @File : chart3_认识数据
# @Project : data_mining

'''
第三章 认识数据

    3.1 属性及其类型
        1_属性
            属性 = 特征 = 维度 = 变量 = 数据库中的列
            (attribute=feature=dimension=variable)
        2_属性类型
            定性（离散）
                (1)标称属性：分类无序，众数
                (2)二元属性：二分类无序，标称的一种，众数
                (3)序数属性：分类有序，众数和中位数
            定量（离散或连续）
                (4)数值属性：有序可度量，众数、中位数和均值

    3.2 数据的基本统计描述
        1_中心趋势度量（找数据中心点的位置，反应整体数据水平）
            (1)均值/加权均值
            (2)中位数
            (3)众数
            (4)中列数：最大值和最小值的均值

        2_数据散布度量（如果数据散度较大，用中心趋势会出现大偏差，所以用散布趋势补充中心趋势）
            (1)极差/四分位数/四分位数极差
                    极差：最大最小值差
                    四分位数：从小到大排序后，用3个点将其分为4部分
                    四分位数极差：第三个分位数-第一个分位数（如12个数排序后，第9个数-第3个数）
            (2)五数概括/盒图/离群点
                    五数概括：最小值/第一四分位数/中位数/第三四分位数/最大数
                    盒图：箱型图，体现了五数概括，用四分位数间距检测异常值
                    离群点：用四分位数间距找出离群点

    3.3 数据可视化
    3.4 数据对象的相似性度量
        1_数据矩阵和相异性矩阵
            数据矩阵：
                对象-属性结构，每行代表一个对象，每列代表一个属性
            相异性矩阵：
                对象-对象结构，每个值代表行列对象的差异度，值越大表示差异性越大
        2_标称属性的相似性度量
            不匹配率 = 1 - （特征匹配数）/总数
        3_二元属性的相似性度量
            相异性 = 1 - 相似性 = 交集/并集
        4_数值属性的相似度度量
            (1)欧式距离：两点直线距离
            (2)曼哈顿距离：各对应位置差异之和
            (3)闵可夫斯基距离：前两者的结合和推广
            (4)切比雪夫距离：...
            (5)汉明距离：字符串变换数字的最小替换次数
        5_序数属性的相似度度量
            转换成数值属性后，用数值属性的相似度度量方法
        6_混合类型属性的相似性
            分不同类型进行度量再加权求和
        7_余弦相似性
            针对文档数据的相似度度量，一个文档的每个词频组成一个词频向量x，
            另一个为y，相似度=x*y/(||x||*||y||)
        8_距离度量python实现
            下方实现
'''
import numpy as np
from scipy.spatial.distance import pdist


# numpy实现常见的距离度量
# 1_欧式距离
def euclidean(x, y):
    return np.sqrt(np.sum((x - y) ** 2))
# 2_曼哈顿距离
def manhattan(x, y):
    return np.sum(np.abs(x - y))
# 3_切比雪夫距离
def chebyshev(x,y):
    return np.max(np.abs(x-y))
# 4_闵可夫斯基距离
def minkowski(x,y,p):
    return np.sum(np.abs(x-y)**p)**(1/p)
# 5_汉明距离
def hamming(x,y):
    return np.sum(x!=y)/len(x)
# 6_余弦距离
def cos_similarity(x,y):
    return np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))

# 用scipy的pdist()方法实现对象的距离计算
x = (0.7,0.9,0.2,0.3,0.8,0.4,0.6,0,0.5)
y = (0.6,0.8,0.5,0.4,0.3,0.5,0.7,0.2,0.6)
X = np.vstack([x,y])
d1 = pdist(X,'euclidean')
d2 = pdist(X,'cityblock')
d3 = pdist(X,'chebyshev')
d4 = pdist(X,'minkowski',p=2)
d5 = pdist(X,'cosine')

print('欧氏距离：',d1)
print('曼哈顿距离：',d2)
print('切比雪夫距离：',d3)
print('闵可夫斯基距离：',d4)
print('余弦相似性：',1-d5)


